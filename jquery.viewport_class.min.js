/**
 * Viewport Class jQuery JavaScript Plugin v0.1.8
 * http://www.intheloftstudios.com/packages/jquery/jquery.viewport_class
 *
 * jQuery plugin (for responsive design) registers an element to maintain a css class of the viewport when it changes (with optional callback on viewport change)
 *
 * Copyright 2013, Aaron Klump
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Date: Wed Oct  8 10:01:49 PDT 2014
 *
 * There are some global methods/variables available to your other scripts:
 *
 *   - jQuery.fn.viewportClass.getViewport()
 *
 * These variables hold the values computed in
 * jQuery.fn.viewportClass.getViewport() in case you need to back reference
 * them after the environment has changed.
 *
 *   - jQuery.fn.viewportClass.viewport: viewport name
 *   - jQuery.fn.viewportClass.viewportWidth: width of current viewport
 *   - jQuery.fn.viewportClass.width: The window actual width
 *   - jQuery.fn.viewportClass.height: the window actual height
 *
 * @param function callback
 *   A function to be called each time the body class changes. It receives the
 *   following parameters:
 *   - (int) viewportWidth: The pixel width of the design window, e.g. 320
 *   - (string) viewport: The name of the viewport, e.g. mobile-landscape
 *   - (bool) resized: This will be false the first time callback is called, as
 *     it the page load calls this function; then it will be -1 if the resize
 *     happens while the screen is getting smaller, and 1 if the window got
 *     bigger.
 * @param object breakpoints
 *   Optional. An object that defines custom breakpoints and classes.
 *  
 * @code
 *  $('body').viewportClass();
 * @endcode
 *
 * @code
 *  $('body').viewportClass(onViewportChange, {
      'mobile-p': 320,
      'mobile-l': 480,
      'iphone5-l': 568,
      'tablet_p': 768,
      'desktop': 960,
      'widescreen': 1080,
    });
 *
 * ...elsewhere in your code...
 *
 * function onViewportChange(viewportWidth, viewport, resized) {
 *   // The beauty of this callback is that it is only triggered when switching
 *   between viewports, not when the window changes. And you know if you're
 *   getting bigger or smaller windows.
 * }
 * @endcode
 * 
 */(function(e,t,n,r){"use strict";function i(t,n,r){this.element=t;this.callback=n;this.options=e.extend({},e.fn.viewportClass.defaults,r);this.prevViewport=null;this.prevWidth=null;this.init()}function s(){return e(t).width()}function o(){return e(t).height()}i.prototype.applyClass=function(t,n){e(this.element).removeClass(this.options.cssPrefix+this.prevViewport);if(this.prevViewport!==t){this.prevViewport=t;this.prevWidth=s()}e(this.element).addClass(this.options.cssPrefix+t);this.callback&&this.callback(e.fn.viewportClass.viewportWidth,t,n)};i.prototype.init=function(){var n=this,r;n.prevViewport===null&&e(t).load(function(){r=e.fn.viewportClass.getViewport(n.options.breakpoints);n.applyClass(r,0)});e(t).bind("resize",function(){r=e.fn.viewportClass.getViewport(n.options.breakpoints);if(r!==n.prevViewport){var t=s()>n.prevWidth?1:-1;n.applyClass(r,t)}})};e.fn.viewportClass=function(t,n){var r={};typeof n!="undefined"&&(r.breakpoints=n);return this.each(function(){var n=new i(this,t,r);e.fn.viewportClass.instances.push(n)})};e.fn.viewportClass.defaults={breakpoints:{"mobile-mini":240,"mobile-portrait":320,"mobile-landscape":480,tablet_portrait:768,desktop:960},cssPrefix:"viewport-"};e.fn.viewportClass.instances=[];e.fn.viewportClass.getViewport=function(t){var n={width:s(),height:o()};typeof t=="undefined"&&(t=e.fn.viewportClass.defaults.breakpoints);for(var r in t){if(n.width<=t[r]){n.viewport=r;n.viewportWidth=t[r];break}n.viewport=r;n.viewportWidth=t[r]}for(r in n)e.fn.viewportClass[r]=n[r];return n.viewport};e.fn.viewportClass.version=function(){return"0.1.8"}})(jQuery,window,document);