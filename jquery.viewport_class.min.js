/**
 * Viewport Class jQuery JavaScript Plugin v1.0.1
 * http://www.intheloftstudios.com/packages/jquery/jquery.viewport_class
 *
 * jQuery plugin (for responsive design) registers an element to maintain a css class of the viewport when it changes (with optional callback on viewport change)
 *
 * Copyright 2013, Aaron Klump
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Date: Mon Sep  7 07:06:02 PDT 2015
 *
 * @license
 */
(function($, t, i, e) {
    "use strict";
    function s(t, i) {
        this.el = t;
        this.$el = $(t);
        this.options = $.extend({}, $.fn.viewportClass.defaults, i);
        this.callback = this.options.callback;
        this.prevViewport = null;
        this.prevWidth = null;
        this.init();
    }
    s.prototype.applyClass = function(t, i) {
        this.$el.removeClass(this.options.cssPrefix + this.prevViewport);
        if (this.prevViewport !== t) {
            this.prevViewport = t;
            this.prevWidth = o();
        }
        this.$el.addClass(this.options.cssPrefix + t);
        if (this.callback) {
            this.callback($.fn.viewportClass.data.viewportWidth, t, i);
        }
    };
    s.prototype.init = function() {
        var i = this;
        var e;
        $.fn.viewportClass.getViewport(i.options.breakpoints);
        if (i.prevViewport === null) {
            $(t).load(function() {
                e = $.fn.viewportClass.getViewport(i.options.breakpoints);
                i.applyClass(e, 0);
                if ($.isFunction(i.options.onReady)) {
                    i.options.onReady(e, i);
                }
            });
        }
        $(t).bind("resize", function() {
            e = $.fn.viewportClass.getViewport(i.options.breakpoints);
            if (e !== i.prevViewport) {
                var t = o() > i.prevWidth ? 1 : -1;
                i.applyClass(e, t);
            }
        });
    };
    $.fn.viewportClass = function(t, i) {
        if (typeof t === "object" && typeof i === "undefined") {
            i = t;
            t = null;
        } else if (typeof t === "function") {
            i = i || {};
            i.callback = t;
        }
        return this.each(function() {
            var t = new s(this, i);
            $.fn.viewportClass.instances.push(t);
        });
    };
    $.fn.viewportClass.defaults = {
        onReady: null,
        callback: null,
        breakpoints: {
            "mobile-mini": 240,
            "mobile-portrait": 320,
            "mobile-landscape": 480,
            "tablet-portrait": 768,
            desktop: null
        },
        cssPrefix: "viewport-"
    };
    $.fn.viewportClass.instances = [];
    $.fn.viewportClass.data = {};
    $.fn.viewportClass.getViewport = function(t) {
        var i = {
            width: o(),
            height: n()
        };
        if (typeof t === "undefined") {
            t = $.fn.viewportClass.defaults.breakpoints;
        }
        for (var e in t) {
            if (i.width <= t[e]) {
                i.viewport = e;
                i.viewportWidth = t[e];
                break;
            }
            i.viewport = e;
            i.viewportWidth = t[e];
        }
        $.fn.viewportClass.data = {};
        for (e in i) {
            $.fn.viewportClass.data[e] = i[e];
        }
        return i.viewport;
    };
    function o() {
        return $(t).width();
    }
    function n() {
        return $(t).height();
    }
    $.fn.viewportClass.version = function() {
        return "1.0.1";
    };
})(jQuery, window, document);